# @package lensingClass
# Contains lensing calculation functions
#
# lensing class

import sys
import cosmocalcs
import pyfits
import copy
import powerspec
import math
#import numdisplay
#import time
from numpy import linspace

class lensingClass(object):
    """
    cosmocalcs.cosmologyCalculator(h, 1, .05, .8)
    """

    """
    Initialization of z value by class call
    """
    def __init__(self, h=0.7, omegamat=0.3, omegaDE=0.7, nlistp=[0]):
    #def __init__(self, h, omegamat, omegaDE, nlistp):

        self.numbins = 200                # Number of bins to sort redshifts in
	self.integrationbins = 50         # Number of integration steps to determine gaussian probability
	self.z_0 = 0.05               

	self.units = 1                    # 1 for Mpc unit calculations
	self.numgalaxies = 0

	self.h = h                        # Hubble parameters

        self.omegams = [omegamat, omegaDE, 0.05]
        self.wX=-1.                       # dark energy equation of state today
        self.wXa=0.                       # dark energy equation of state evolution
	self.width = .05                  # Redshift width for Gaussian probability function
	#print "lc nlistp is: "
	self.nlistp = nlistp
	#print nlistp
    """
	Extracts redshifts from DLS data files
    """
    def getRedshiftsFromDLS(self):
        
        #F1 = pyfits.open('/home/akilgall/field1_sources.fits')
        F2 = pyfits.open('/home/akilgall/field2_sources.fits')
        #F3 = pyfits.open('/home/akilgall/field3_sources.fits')
        #F4 = pyfits.open('/home/akilgall/field4_sources.fits')
        #F5 = pyfits.open('/home/akilgall/field5_sources.fits')
        
        #F1header = pyfits.getheader('/home/akilgall/field1_sources.fits')
        #F2header = pyfits.getheader('/home/akilgall/field2_sources.fits')
        #F3header = pyfits.getheader('/home/akilgall/field3_sources.fits')
        #F4header = pyfits.getheader('/home/akilgall/field4_sources.fits')
        #F5header = pyfits.getheader('/home/akilgall/field5_sources.fits')
        
        #F1datacube = pyfits.getdata('/home/akilgall/field1_sources.fits')
        F2datacube, F2header = pyfits.getdata('/home/akilgall/field2_sources.fits', header=True)
        #F3datacube = pyfits.getdata('/home/akilgall/field3_sources.fits')
        #F4datacube = pyfits.getdata('/home/akilgall/field4_sources.fits')
        #F5datacube = pyfits.getdata('/home/akilgall/field5_sources.fits')

        print "Printing table headers"
        print F2header
        print "\n\n"

        print "Printing data cubes"
        print F2datacube
        print "\n\n"

	# Extract redshift field from file
        #redshiftListF1 = F1datacube[3]
        redshiftListF2 = F2datacube.field(1)
        #redshiftListF3 = F3datacube[3]
        #redshiftListF4 = F4datacube[3]
        #redshiftListF5 = F5datacube[3]

        print "Printing redshift list "
        print redshiftListF2
        print "\n\n"

	self.numgalaxies = len(redshiftListF2)
               
        return redshiftListF2

    """
    Returns the inputted redshift values sorted from smallest to largest.
    """
    def sort_Redshift_Values(self, zlist):

        sortedzlist = sorted(zlist)

        return sortedzlist


    """
    Calculates the lensing weight function, W, to be used in the power spectrum calculation
    
    Inputs a set of redshifts, and uses cosmocalcs to calculate the weight at each z
    """
    def lensingWeightFunction(self, z, lensingzlist, orgList, numList):

        cosmocalcsClass = cosmocalcs.cosmologyCalculator(self.h, self.omegams[0], self.omegams[1], self.wX, self.wXa)

        cosmocalcsClass.setEmissionRedShift(z)
        D_A_source = cosmocalcsClass.AngularDiameterDistanceMpc()

	nlist = []
	for zs in orgList:
		nlist.append(self.n_i(zs, numList, orgList, lensingzlist))

#	for i in range(len(orgList)):
#		nlist[i] = nlist[i]/sum(nlist)*265601.0

	#integral = 0.0
	#for i in range(len(orgList) - 1):
	#	integral += nlist[i]*(self.nlistp[i] + self.nlistp[i+1])/2.0*(orgList[i+1] - orgList[i])

	#for i in range(len(orgList)):
	#	nlist[i] = nlist[i]/integral*265601.0

	f = open('nlist.txt', 'w')
	for i in range(len(nlist)):
		f.write(str(orgList[i]) + '\t' + str(nlist[i]) + '\n')
	f.close()
	

        integrand = []
	i = 1

	# Loops through the binned redshift list, appends to the integration array for redshifts >= the
	#     source redshift
        for zprime in orgList[1:len(orgList) - 1]: 
            if zprime >= z:

		"""
		Sets the emission redshift using cosmocalcs class file, will extract angular diameter distance from this.
		"""
	        cosmocalcsClass.setEmissionRedShift(zprime)
		D_A = cosmocalcsClass.AngularDiameterDistanceMpc()
	
		"""
		Returns integration integrand for lensing weight function calculation
		"""
                integrand.append((D_A*(1+zprime) - D_A_source*(1+z))/(D_A*(1+zprime))*nlist[i]*(self.nlistp[i] + self.nlistp[i+1])/2.0*(orgList[1] - orgList[0]))
		#integrand.append(self.doubletAngularDiameterDistance(z,zprime)/D_A*nlist[i]*(self.nlistp[i] + self.nlistp[i+1])/2.0*(orgList[1] - orgList[0]))


	    i += 1

	W = 0.0

	for i in range(len(integrand) - 1):

		W += (integrand[i+1] + integrand[i])/2.0*(orgList[2] - orgList[1])

        cosmocalcsClass.setEmissionRedShift(z)
       	D_A = cosmocalcsClass.AngularDiameterDistanceMpc()

        W = 3/2*self.omegams[0]*100*100*self.h*self.h*pow(1+z,1)*D_A*W/300000.0

        return W 

    """
	Organizes the redshifts into a set of binned arrays.

 	Outputs orgList, a set of binned redshifts, and numList, the number of source galaxies within each bin
    """
    def organizeRedshifts(self, zlist):

	if zlist == []:

		return [], []

	#from numpy import roll

	#print "Number of galaxies found is: ", len(zlist)

        orgList = []
        numList = []
	
        minList = 0.
        #maxList = max(zlist)
	maxList = 5.

        delta = (maxList - minList)/(self.numbins-1)

	binVal = 0

	for i in range(self.numbins):

		orgList.append(binVal)

		#print "Printing binVal ", binVal

		binVal += delta        

		numList.append(0)

	count = 0

	for i in range(len(zlist)):

		for j in range(self.numbins - 1):

			if zlist[i] >= orgList[j] and zlist[i] < orgList[j+1]:

				numList[j] += 1
				count += 1
        return orgList, numList

    """
	Calculates the probability of finding a galaxy of certain redshift within a bin
    """
    def n_i(self, z, numList, orgList, zlist):

	nlist = []
	savedi = 0

	# Runs through all the binned redshifts, determines which bin the redshift is associated with
        for i in range(len(orgList) - 1):

            if z >= orgList[i] and z < orgList[i+1]:

		savedi = i
		break

	#return numList[savedi]/(orgList[1] - orgList[0])/265601.0
	return (pow(z, 2) * math.exp(- pow((z / 0.5),1.2))/0.138472)

    """
	Returns a gaussian probability cetered at z_0 at point x with a given width (normalized)
    """
    def gaussFit(self, x, z_0):

        return math.exp(-pow(x - z_0, 2.)/(2.*pow(self.width, 2)))/(pow(2.*math.pi, 0.5)*self.width)

    def plotWZ(self, Zarray, Warray):

	import matplotlib.pyplot as plt

	plt.plot(Zarray, Warray, 'g--')
	plt.xlabel('Redshift')
   	plt.ylabel('W(z)')
    	plt.title('Lensing Weight Function vs. Redshift')
    	plt.axis([min(Zarray), max(Zarray), min(Warray), max(Warray)])
    	plt.grid(True)
    	plt.savefig('WvsZ.png')
    	plt.close()

    def n_list(self, numList, orgList, zlist):

	delta = orgList[2] - orgList[1]
	nlist = []

	j = 0

	zlist = sorted(zlist)

	for z in orgList:
	    print(z)

	    n_z = 0
	    count = 0

            for i in range(len(orgList) - 1):

	        if z >= orgList[i] and z < orgList[i+1]:

		    savedi = i
		    break


	    for zt in zlist:
	
		if zt >= orgList[savedi] - delta and zt < orgList[savedi+1] + delta:
	
			count += 1

			integrand = []

			x = linspace(orgList[savedi], orgList[savedi+1], 50)

			# Creates gaussian probability array for integration
			for x_prime in x:

				integrand.append(self.gaussFit(x_prime, zt))

			# Integrates this to determine P(z'|z)
			for tempxval in range(len(integrand) - 1):

				n_z += (integrand[tempxval+1] + integrand[tempxval])/2.0*(x[tempxval+1] - x[tempxval])

		#if zt > orgList[savedi+1] + delta:
		#    break
	    
	    #nlist.append(n_z)
	    if (numList[j] != 0):
		nlist.append(n_z/count)
		print("\t" + str(n_z/numList[j]))
	    else:
		nlist.append(0.0)
		print("\t0.0")
	    j += 1

	integral = 0.0
	for i in range(len(nlist) - 1):

		integral += (nlist[i] + nlist[i+1])/2.0*(orgList[i+1] - orgList[i])


	for i in range(len(nlist)):
		nlist[i] = nlist[i]/integral

	f = open('P_zph.txt', 'w')
	for i in range(len(nlist)):
		f.write(str(orgList[i]) + '\t' + str(nlist[i]) + '\n')
	f.close()

	return nlist

	
    """
    Calculates Angular Diameter distance between z1 and z2
    """
    def doubletAngularDiameterDistance(self, z1, z2):

	"""
	Initializes cosmocalcs class
	"""
	doubletAngularDiameterDistanceCosmocalcs = cosmocalcs.cosmologyCalculator(self.h, self.omegams[0], self.omegams[1], self.wX, self.wXa)

        omegamat = self.omegams[0]
	DH = 3000

        """
        Calculates and then returns angular diameter distance for z2
        """
        doubletAngularDiameterDistanceCosmocalcs.setEmissionRedShift(z2)
       	DM2 = doubletAngularDiameterDistanceCosmocalcs.TransComovDistanceMpc()
        doubletAngularDiameterDistanceCosmocalcs.setEmissionRedShift(z1)
	DM1 = doubletAngularDiameterDistanceCosmocalcs.TransComovDistanceMpc()	

        """
        Calculates total angular diameter distance between two redshifts
        """
        DA12 = 1/(1 + z2) * (DM2*pow(1 + omegamat*pow(DM1, 2)/pow(DH, 2), 0.5) - DM1*pow(1 + omegamat*pow(DM2, 2)/pow(DH, 2), 0.5))

        return DA12

